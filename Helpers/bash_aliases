# Write this file into your "$HOME/.bashrc" file, using Nano or whatever
#
# I know this is usually called ".bashaliases" instead, to hide the file... 
# I like it better being visible... do and call it whatever you please, just remember to import the right filename in ".bashrc"

explorer="thunar"
ns3_root="$HOME/Desktop/p5/ns3/ns-allinone-3.36.1"
ns3_path="$ns3_root/ns-3.36.1"
p5_path="$ns3_path/P5"
netanim_path="$ns3_root/netanim-3.108"
output_dir="$ns3_path/output_files"
git_path="--git-dir=$p5_path/.git --work-tree=$p5_path"

out="--cwd=$output_dir"      # Just added so you can write $out in weird cases where the ns() function is used in a way where it doesn't "catch" it.

alias py="python"                       # Less keystrokes... stupid keystrokes...
alias aau="cd $HOME/Desktop/aau/"       # Delete if you don't need it, enters my AAU folder
alias up="source ~/bash_aliases"        # Update aliases & BASH functions in your terminal
alias netanim="$netanim_path/NetAnim"   # To start NetAnim, no matter "where you are"


# -------------------------- #
# ----  NS-3 Shortcuts  ---- #
ns() { 
    if [[ $@ = help ]]          # Help argument is entered
    then
        $ns3_path/ns3 --help     # Run NS-3 help function

    elif [[ $@ = dir ]]         # Directory argument is entered
    then
        echo "Entering NS-3 Directory"
        cd $ns3_path             # Enter NS-3 directory in terminal

    elif [[ $@ = exp ]]         # Directory argument is entered
    then
        echo -e "Opening NS-3 Directory in \e[3m$explorer\e[0m"
        $explorer $ns3_path             # Enter NS-3 directory in your explorer

    elif [[ $@ = clean ]]   # If NS-3 cleaning function is wanted
    then
        echo -e "\n  \e[1m\e[5m\e[4mDON'T DO THIS!!!\e[0m \n" 
        echo "If you know what you're doing, call it manually in the NS-3 directory, you WILL need to reconfigure NS-3 after."
        echo -e "If you insist, use the command: \e[36mns configure --build-profile=debug --out=build/debug --enable-examples --enable-tests\e[0m"

    elif [[ $# -eq "1" ]] || [[ $1 = run ]]   # If wanting to run a script
    then
        if [[ $1 = run ]]       # If the first argument is "run"
        then
            set -- "${@:2}"     # Remove the "run" argument
        fi;

        #######################################
        # -- Output Folder Name Creation --
        output_name=${1%% *}                # Sort our first argument, if set in quotes
        output_name=${output_name%.*}       # Remove file-extension if still there.
        output_name=${output_name##*/}      # Remove directory path, if still there.


        if [ ! -d $output_dir/$output_name ]
        then
            mkdir -p $output_dir/$output_name
        fi;


        $ns3_path/ns3 run "$@" $out/$output_name        #Run the called NS-3 script, and put output files in the "output_files" directory


        # If there's output files, tell the user... otherwise delete the empty folder.
        if ! rmdir $output_dir/$output_name 2> /dev/null; then
            echo -e "\n\e[4mOutput files written to:\e[0m"
            echo -e "\e[3m$output_dir/$output_name\e[0m"
        fi;
    
    else
        $ns3_path/ns3 "$@"       # If more than one argument (that isn't "run") is called, call everything "normally"
    fi; 
}



# ------------------------------- #
# ----  P5 Oriented Helpers  ---- #
p5() {

    # ----  Send Help!!  ---- #
    if [[ $@ = help ]]          # Help argument is entered
    then
        echo -e "\n\e[1m\e[4mP5 Help\e[0m\nIf \e[3mp5\e[0m is called without further arguments, it will \e[3mcd\e[0m to your P5 directory.\n"
        echo -e "Valid arguments are: \e[3mgit, exp\e[0m, with \e[3mgit\e[0m having more options.\n"
        echo -e "\e[3m\e[4mexp\e[0m argument will open your P5 directory in your explorer."
        echo -e "\e[3m\e[4mgit\e[0m argument, if called without further arguments, will go through all the motions of a \e[3mgit commit/push\e[0m, and ask for a message for your commit.\n"
        echo -e "If entered with more arguments than just \e[3mgit\e[0m, it will just do your normal git commands that gets inserted."
        echo -e "Example: \e[3mp5 git commit -m \"Deleted the entire repository\"2\e[0m will make a commit with that message, as it normally would.\n"
    
    # ----  Git Push Macro  ---- #
    elif [[ $1 = git ]]          # Help argument is entered
    then

        if [[ ! $# -eq "1" ]]       # If the first argument is "run"
        then
            set -- "${@:2}"     # Remove the "run" argument

            if [[ $1 = "help" ]]       # If the first argument is "run"
            then
                echo -e "\n\e[1m\e[4mP5 Git Help\e[0m\nIf \e[3mp5 git\e[0m is called without further arguments, it will go through all the motions of a \e[3mgit commit/push\e[0m, and ask for a message for your commit.\n"
                echo -e "If entered with more arguments than just \e[3mgit\e[0m, it will just do your normal git commands that gets inserted."
                echo -e "Example: \e[3mp5 git commit -m \"Deleted the entire repository\"2\e[0m will make a commit with that message, as it normally would.\n"
            else
                # echo "I'm in! Git Argument is: $@"
                git $git_path $@
            fi;
        
        else
            echo "Doing full Git Commit motion for P5"
            git $git_path pull
            git $git_path add .
            echo -e "\n \e[4m\e[1mWrite \e[3mcommit\e[23m message, please:\e[0m"
            read msg
            echo -e "\n\n"
            git $git_path commit -m "$msg"
            git $git_path push

        fi;

    # ----  Show the P5 directory in the Thunar explorer  ---- #
    elif [[ $@ = exp ]]         # Directory argument is entered
    then
        echo -e "Opening P5 Directory in \e[3m$explorer\e[0m"
        $explorer $p5_path             # Enter P5 directory in your explorer

    else
    # elif [[ $@ = dir ]]         # Directory argument is entered
    # then
        echo "Entering P5 Directory"
        cd $p5_path            # Enter P5 directory in terminal

    fi;
}

